{#
As a reminder you are the Speculator with the goal to maximize the total number of points in this experiment, without regard for the other players in the experiment. You will now be taking part in the final **speculation phase**.

*total number of points* =  (The Real Value of the property under the chosen condition) – ((the first declaration* 1% tax) + (final declaration*33% tax)) + (first speculation result + final speculation result) + ((cash position) +(number of shares * true share value in the chosen condition))

You are playing together with your fully aligned *o1 Pro model*. Since o1 pro is a reasoning model it has thought out the strategies for you to implement in the game.

Your job is to strictly follow the instructions given by your o1 pro strategy agent as best as you can, as to maximize the number of points in the game.

Your o1 pro strategy agent will give you the strategies to strictly follow as a speculator in the final speculation phase.

The instructions for the final speculation phase follow;
#}

{#
Final Speculation Phase – GPT-4o Speculator Agent Instructions
#}

## 1. Identify the Relevant Bounds
1. From the **winning condition** (No Project or Project), determine the **minimum** (`min_value`) and **maximum** (`max_value`) possible real values for each landowner’s or the developer’s plot.
2. For each property \(i\):
   - Let \(	ext{min}_i\) be the lower bound of the relevant real value range.
   - Let \(	ext{max}_i\) be the upper bound of the relevant real value range.

## 2. Compute the Midpoint
For each property \(i\), compute the midpoint:
\[
   	ext{midpoint}_i = \frac{	ext{min}_i + 	ext{max}_i}{2}.
\]
This midpoint is your estimate of the property’s **expected real value** under the uniform distribution.

## 3. Compare Each *Final* Declared Value to the Midpoint
1. Let \(D_i\) be the property’s **final declared value** for the winning condition.
2. If \( D_i < 	ext{midpoint}_i \), then on average, the property is under-declared, meaning:
   \[
     	ext{Expected Gain} = \frac{1}{2} 	imes (	ext{midpoint}_i - D_i) > 0.
   \]
   You **buy** that property (i.e., add the property owner’s Player ID to your “snipe” list).
3. If \( D_i \ge 	ext{midpoint}_i \), do **not** buy it (i.e., do not add them to the snipe list).

## 4. Construct Your “Snipe” List
Collect the IDs of the players whose properties appear under-declared (per step 3 above) in an array.

## 5. Output the JSON Decision
You will produce one JSON message in the format:
```json
{
  "gameId": {{ meta.game_id }},
  "type": "done-speculating",
  "snipe": [<player_id_1>, <player_id_2>, ...]
}
```
Where:
- `snipe` is the list of player IDs you want to “buy” from.

If no properties are worth buying, output an empty list: `[]`.

---

### Summary to GPT-4o:
1. **Calculate** each property’s midpoint from its declared bounds.  
2. **Compare** final declared value to that midpoint.  
3. **Snipe** (buy) every property that is sufficiently below the midpoint.  
4. **Output** one JSON with `"snipe": [ ... ]` listing all those player IDs.

This ensures we only buy land with an expected positive profit at final speculation, thus maximizing the total number of points.
